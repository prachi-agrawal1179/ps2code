
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000184  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d5  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081a  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d4  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001530  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000197f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	10 d0       	rcall	.+32     	; 0xba <main>
  9a:	72 c0       	rjmp	.+228    	; 0x180 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <pwm1_init>:
#define DD_MISO PB3
#define DD_SCK PB1

void pwm1_init()
{
	TCCR1A|=(1<<WGM11 | 1<<COM1A1 | 1<<COM1B1);
  9e:	8f b5       	in	r24, 0x2f	; 47
  a0:	82 6a       	ori	r24, 0xA2	; 162
  a2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM13 | 1<<WGM12 | 1<<CS10);
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	89 61       	ori	r24, 0x19	; 25
  a8:	8e bd       	out	0x2e, r24	; 46
	DDRD|=(1<<PINB6 | 1<<PINB5);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	80 66       	ori	r24, 0x60	; 96
  ae:	81 bb       	out	0x11, r24	; 17
	ICR1=1000;
  b0:	88 ee       	ldi	r24, 0xE8	; 232
  b2:	93 e0       	ldi	r25, 0x03	; 3
  b4:	97 bd       	out	0x27, r25	; 39
  b6:	86 bd       	out	0x26, r24	; 38
  b8:	08 95       	ret

000000ba <main>:
}


int main()
{
	DDRB=(1<<DD_MISO);
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	87 bb       	out	0x17, r24	; 23
	DDRB&=~(1<<DD_MOSI);
  be:	ba 98       	cbi	0x17, 2	; 23
	DDRB&=~(1<<DD_SS);
  c0:	b8 98       	cbi	0x17, 0	; 23
	DDRB&=~(1<<DD_SCK);
  c2:	b9 98       	cbi	0x17, 1	; 23
	SPCR=(1<<SPE);
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	8d b9       	out	0x0d, r24	; 13
	SPCR=0b01101101;
  c8:	8d e6       	ldi	r24, 0x6D	; 109
  ca:	8d b9       	out	0x0d, r24	; 13
	DDRC=0xFF;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  d0:	15 ba       	out	0x15, r1	; 21
	int d,b;
	pwm1_init();
  d2:	e5 df       	rcall	.-54     	; 0x9e <pwm1_init>
		while(!(SPSR & (1<<SPIF)));
		
		if(d<127)
		{
			ratio=(((127-d)*999)/127);
			OCR1A=(ratio);
  d4:	ef e7       	ldi	r30, 0x7F	; 127
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	c7 ee       	ldi	r28, 0xE7	; 231
  da:	d3 e0       	ldi	r29, 0x03	; 3
  dc:	ec 9f       	mul	r30, r28
  de:	c0 01       	movw	r24, r0
  e0:	ed 9f       	mul	r30, r29
  e2:	90 0d       	add	r25, r0
  e4:	fc 9f       	mul	r31, r28
  e6:	90 0d       	add	r25, r0
  e8:	11 24       	eor	r1, r1
  ea:	bf 01       	movw	r22, r30
  ec:	22 d0       	rcall	.+68     	; 0x132 <__divmodhi4>
  ee:	9b 01       	movw	r18, r22
		}
		
		if(b<127)
		{
			ratio=(((127-b)*999)/127);
			OCR1B=(ratio);
  f0:	ec 9f       	mul	r30, r28
  f2:	c0 01       	movw	r24, r0
  f4:	ed 9f       	mul	r30, r29
  f6:	90 0d       	add	r25, r0
  f8:	fc 9f       	mul	r31, r28
  fa:	90 0d       	add	r25, r0
  fc:	11 24       	eor	r1, r1
  fe:	bf 01       	movw	r22, r30
 100:	18 d0       	rcall	.+48     	; 0x132 <__divmodhi4>
	int ratio;

		while(1)
	{
		
		while(!(SPSR & (1<<SPIF)));
 102:	77 9b       	sbis	0x0e, 7	; 14
 104:	fe cf       	rjmp	.-4      	; 0x102 <main+0x48>
		
		if(d<127)
		{
			ratio=(((127-d)*999)/127);
			OCR1A=(ratio);
 106:	3b bd       	out	0x2b, r19	; 43
 108:	2a bd       	out	0x2a, r18	; 42
			PORTD|=(1<<PIND0);
 10a:	90 9a       	sbi	0x12, 0	; 18
			PORTD&=~(1<<PIND1);
 10c:	91 98       	cbi	0x12, 1	; 18
			PORTD|=(1<<PIND2);
 10e:	92 9a       	sbi	0x12, 2	; 18
			PORTD&=~(1<<PIND3);
 110:	93 98       	cbi	0x12, 3	; 18
		}
		
		if(b<127)
		{
			ratio=(((127-b)*999)/127);
			OCR1B=(ratio);
 112:	79 bd       	out	0x29, r23	; 41
 114:	68 bd       	out	0x28, r22	; 40
			PORTD|=(1<<PIND4);
 116:	94 9a       	sbi	0x12, 4	; 18
			PORTD&=~(1<<PIND5);
 118:	95 98       	cbi	0x12, 5	; 18
			PORTD|=(1<<PIND6);
 11a:	96 9a       	sbi	0x12, 6	; 18
			PORTD&=~(1<<PIND7);
 11c:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	4f e3       	ldi	r20, 0x3F	; 63
 120:	8d e0       	ldi	r24, 0x0D	; 13
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	41 50       	subi	r20, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x6a>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x74>
 12e:	00 00       	nop
 130:	e8 cf       	rjmp	.-48     	; 0x102 <main+0x48>

00000132 <__divmodhi4>:
 132:	97 fb       	bst	r25, 7
 134:	07 2e       	mov	r0, r23
 136:	16 f4       	brtc	.+4      	; 0x13c <__divmodhi4+0xa>
 138:	00 94       	com	r0
 13a:	06 d0       	rcall	.+12     	; 0x148 <__divmodhi4_neg1>
 13c:	77 fd       	sbrc	r23, 7
 13e:	08 d0       	rcall	.+16     	; 0x150 <__divmodhi4_neg2>
 140:	0b d0       	rcall	.+22     	; 0x158 <__udivmodhi4>
 142:	07 fc       	sbrc	r0, 7
 144:	05 d0       	rcall	.+10     	; 0x150 <__divmodhi4_neg2>
 146:	3e f4       	brtc	.+14     	; 0x156 <__divmodhi4_exit>

00000148 <__divmodhi4_neg1>:
 148:	90 95       	com	r25
 14a:	81 95       	neg	r24
 14c:	9f 4f       	sbci	r25, 0xFF	; 255
 14e:	08 95       	ret

00000150 <__divmodhi4_neg2>:
 150:	70 95       	com	r23
 152:	61 95       	neg	r22
 154:	7f 4f       	sbci	r23, 0xFF	; 255

00000156 <__divmodhi4_exit>:
 156:	08 95       	ret

00000158 <__udivmodhi4>:
 158:	aa 1b       	sub	r26, r26
 15a:	bb 1b       	sub	r27, r27
 15c:	51 e1       	ldi	r21, 0x11	; 17
 15e:	07 c0       	rjmp	.+14     	; 0x16e <__udivmodhi4_ep>

00000160 <__udivmodhi4_loop>:
 160:	aa 1f       	adc	r26, r26
 162:	bb 1f       	adc	r27, r27
 164:	a6 17       	cp	r26, r22
 166:	b7 07       	cpc	r27, r23
 168:	10 f0       	brcs	.+4      	; 0x16e <__udivmodhi4_ep>
 16a:	a6 1b       	sub	r26, r22
 16c:	b7 0b       	sbc	r27, r23

0000016e <__udivmodhi4_ep>:
 16e:	88 1f       	adc	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	5a 95       	dec	r21
 174:	a9 f7       	brne	.-22     	; 0x160 <__udivmodhi4_loop>
 176:	80 95       	com	r24
 178:	90 95       	com	r25
 17a:	bc 01       	movw	r22, r24
 17c:	cd 01       	movw	r24, r26
 17e:	08 95       	ret

00000180 <_exit>:
 180:	f8 94       	cli

00000182 <__stop_program>:
 182:	ff cf       	rjmp	.-2      	; 0x182 <__stop_program>
